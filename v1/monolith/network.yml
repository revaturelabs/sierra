AWSTemplateFormatVersion: 2010-09-09

Description: Contains the VPC, subnets, Tomcat server, ELB, auto-scaling-group.

Parameters:
  KeyPair:
    Type: "AWS::EC2::KeyPair::KeyName"
    Description: Enter a valid KeyPair Name.
  WebInstanceType:
    Type: String
    Description: Enter one of the possible instance type for web server.
    AllowedValues:
      - t2.micro
      - t2.large
      - m4.large
      - c4.large
  WebMinSize:
    Type: String
    Description: Minimum number of instances in auto scaling group.
  WebMaxSize:
    Type: String
    Description: Maximum number of instances in auto scaling group.
  Environment:
    Type: String
    Description: Select the appropriate environment.
    AllowedValues:
      - dev
      - prod
  AutoscalingAvailZone:
    Type: List<AWS::EC2::AvailabilityZone::Name>
    Description: Select the availability zone of your private subnet for use in the autoscaling group.
  
  CustomPrivateSubnet:
    Type: AWS::EC2::Subnet::Id
    Description: Select a private subnet in the custom VPC.
  
  CustomPublicSubnet:
    Type: AWS::EC2::Subnet::Id
    Description: Select a public subnet in the custom VPC.

  CustomVPC:
    Type: AWS::EC2::VPC::Id
    Description: Select an ID of a VPC that exists in the current region.

Conditions:
  CreateProdResources: !Equals [ !Ref Environment, prod ]
  NoVPCexists: !Equals ["", !Ref CustomVPC]



Mappings:
  RegionToImageId:
    us-east-1:
      ImageId: ami-b70554c8
    us-east-2:
      ImageId: ami-8c122be9
    us-west-1:
      ImageId: ami-e0ba5c83
    us-west-2:
      ImageId: ami-a9d09ed1
    ca-central-1:
      ImageId: ami-0ee86a6a
    ap-south-1:
      ImageId: ami-d783a9b8
    ap-northeast-1: 
      ImageId: ami-e99f4896
    ap-northeast-2:
      ImageId: ami-afd86dc1
    ap-southeast-1:
      ImageId: ami-05868579
    ap-southeast-2:
      ImageId: ami-39f8215b
    eu-central-1:
      ImageId: ami-7c4f7097
    eu-west-1:
      ImageId: ami-466768ac
    eu-west-2:
      ImageId: ami-b8b45ddf
    eu-west-3:
      ImageId: ami-2cf54551
    sa-east-1:
      ImageId: ami-6dca9001
  
  TomcatAmi:
    us-east-1:
      ImageId: ami-0de53d8956e8dcf80
  
  RegionToNatId:
    us-east-1:
      ImageId: ami-01623d7b
    us-east-2:
      ImageId: ami-021e3167
    us-west-1:
      ImageId: ami-004b0f60
    us-west-2:
      ImageId: ami-0541ea7d
    ca-central-1:
      ImageId: ami-0b2d906f
    ap-south-1:
      ImageId: ami-0c184c63
    ap-northeast-1: 
      ImageId: ami-03cf3903
    ap-northeast-2:
      ImageId: ami-0199506f
    ap-southeast-1:
      ImageId: ami-018c3062
    ap-southeast-2:
      ImageId: ami-162c0c75
    eu-central-1:
      ImageId: ami-0097b5eb
    eu-west-1:
      ImageId: ami-076d5d61
    eu-west-2:
      ImageId: ami-0a4c5a6e
    eu-west-3:
      ImageId: ami-0fe35572
    sa-east-1:
      ImageId: ami-0b81dc67


Resources:
  #VPC Set up
  VPC:
    Type: 'AWS::EC2::VPC'
    Condition: NoVPCexists
    Properties:
      CidrBlock: 10.0.0.0/16
  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Condition: NoVPCexists
    Properties:
      VpcId: 
        Ref: VPC
      CidrBlock: 10.0.0.0/24
      Tags:
        - Key: Name
          Value: Public Subnet
  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Condition: NoVPCexists
    DependsOn: PublicSubnet
    Properties:
      VpcId: 
        Ref: VPC
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Name
          Value: Private Subnet
      #Gets the public subnet
      AvailabilityZone: 
        Fn::GetAtt: [PublicSubnet, AvailabilityZone]
  InternetGateway:
    Condition: NoVPCexists
    Type: 'AWS::EC2::InternetGateway'
    Properties: {}

  #Routes
  PublicSubnetRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Condition: NoVPCexists
    Properties:
      VpcId: 
        Ref: VPC
      Tags:
        - Key: Name
          Value: Public Subnet Route Table.
  PrivateSubnetRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Condition: NoVPCexists
    Properties:
      VpcId: 
        Ref: VPC
      Tags:
        - Key: Name
          Value: Private Subnet Route Table.
  RouteToInternetGateway:
    Type: 'AWS::EC2::Route'
    Condition: NoVPCexists
    Properties:
      RouteTableId: 
        Ref: PublicSubnetRouteTable
      GatewayId: 
        Ref: InternetGateway
      DestinationCidrBlock: 0.0.0.0/0
  RouteToNatInstance:
    Type: 'AWS::EC2::Route'
    Condition: NoVPCexists
    Properties:
      RouteTableId: 
        Ref: PrivateSubnetRouteTable
      InstanceId: 
        Ref: NatInstance
      DestinationCidrBlock: 0.0.0.0/0

  #Routing associations
  PublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: NoVPCexists
    Properties:
      RouteTableId: 
        Ref: PublicSubnetRouteTable
      SubnetId: 
        Ref: PublicSubnet
  PrivateSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: NoVPCexists
    Properties:
      RouteTableId: 
        Ref: PrivateSubnetRouteTable
      SubnetId: 
        Ref: PrivateSubnet
  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Condition: NoVPCexists
    Properties:
      VpcId: 
        Ref: VPC
      InternetGatewayId: 
        Ref: InternetGateway

  #Instance Configurations
  Bastion:
    Type: 'AWS::EC2::Instance'
    Properties:
      KeyName: 
        Ref: KeyPair
      InstanceType:
        Ref: WebInstanceType
      ImageId: !FindInMap [RegionToImageId, !Ref 'AWS::Region', ImageId]
      NetworkInterfaces:
        - DeviceIndex: 0
          AssociatePublicIpAddress: true
          DeleteOnTermination: true
          SubnetId: !If [NoVPCexists, !Ref PublicSubnet, !Ref CustomPublicSubnet]
          GroupSet:
            - Ref: WebAppSecurityGroup
      Tags:
        - Key: Name
          Value: Bastion

  NatInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: 
        Ref: WebInstanceType
      ImageId: !FindInMap [RegionToNatId, !Ref 'AWS::Region', ImageId]
      SourceDestCheck: false #needs to be false for NAT instance to work.
      NetworkInterfaces:
        - DeviceIndex: 0
          AssociatePublicIpAddress: true
          DeleteOnTermination: true
          SubnetId: !If [NoVPCexists, !Ref PublicSubnet, !Ref CustomPublicSubnet]
          GroupSet:
            - Ref: WebAppSecurityGroup
      BlockDeviceMappings:
        -
          DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
            VolumeType: gp2
      Tags:
        - Key: Name
          Value: NatInstance
  MountTargetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: VPC
      GroupDescription: Security group for mount target
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '2049'
        ToPort: '2049'
        CidrIp: 0.0.0.0/0
  FileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: generalPurpose
      FileSystemTags:
      - Key: Name
        Value:
          Ref: VolumeName
  MountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: FileSystem
      SubnetId:
        Ref: PublicSubnet
      SecurityGroups:
      - Ref: MountTargetSecurityGroup
  MountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: FileSystem
      SubnetId:
        Ref: PrivateSubnet
      SecurityGroups:
      - Ref: MountTargetSecurityGroup

  #Security Group
  WebAppSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties: 
      GroupDescription: SSH and HTTP and 8080 and Oracle RDS
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 1521
          ToPort: 1521
          CidrIp: 0.0.0.0/0
      VpcId: !If [NoVPCexists, !Ref VPC, !Ref CustomVPC]

Outputs:
  VpcId:
    Description: The ID of the VPC.
    Value: !If [NoVPCexists, VPC, CustomVPC]
    Export:
      Name: VpcId
  PrivateSubnetId:
    Description: The ID of the private subnet.
    Value: !If [NoVPCexists, !Ref PrivateSubnet, !Ref CustomPrivateSubnet]
    Export:
      Name: PrivateSubnetId
  PublicSubnetId:
    Description: The ID of the public subnet.
    Value: !If [NoVPCexists, !Ref PublicSubnet, !Ref CustomPublicSubnet]
    Export:
      Name: PublicSubnetId
  EFSId:
    Description: The ID of the EFS
    Value: !Ref FileSystem
    Export:
      Name: EFSId
  AvailabilityZone:
    Description: The AvailabilityZones available
    Value: !If [NoVPCexists, !GetAtt PrivateSubnet.AvailabilityZone, !Ref AutoscalingAvailZone]
    Export:
      Name: SubnetAvailabilityZone
  # PrivateSubnetAvailabilityZone:
  #   Description: The AZ of the private subnet.
  #   Value: !GetAtt 
  #   Export:
  #     Name: PrivateSubnetAvailabilityZone
