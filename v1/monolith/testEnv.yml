AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  ResourceBucket:
    Type: String
    Description: S3Bucket where resources are stored.
  FileName:
    Type: String
    Description: FileName of file containing environment variables
  KeyPair:
    Type: "AWS::EC2::KeyPair::KeyName"
    Description: Enter a valid KeyPair Name
  EnvironmentVariable:
    Type: String
    Description: Enter a KEY:Value
  WebInstanceType:
    Type: String
    Description: Enter one of the possible instance type for web server.
    AllowedValues:
      - t2.micro
      - t2.large
      - m4.large
      - c4.large
  WebMinSize:
    Type: String
    Description: Minimum number of instances in auto scaling group.
  WebMaxSize:
    Type: String
    Description: Maximum number of instances in auto scaling group.
  Environment:
    Type: String
    Description: Select the appropriate environment.
    AllowedValues:
      - dev
      - prod

Mappings:
  RegionToImageId:
    'ap-south-1':
      ImageId: 'ami-d783a9b8'
    'eu-west-3':
      ImageId: 'ami-2cf54551'
    'eu-west-2':
      ImageId: 'ami-b8b45ddf'
    'eu-west-1':
      ImageId: 'ami-466768ac'
    'ap-northeast-2':
      ImageId: 'ami-afd86dc1'
    'ap-northeast-1':
      ImageId: 'ami-e99f4896'
    'sa-east-1':
      ImageId: 'ami-6dca9001'
    'ca-central-1':
      ImageId: 'ami-0ee86a6a'
    'ap-southeast-1':
      ImageId: 'ami-05868579'
    'ap-southeast-2':
      ImageId: 'ami-39f8215b'
    'eu-central-1':
      ImageId: 'ami-7c4f7097'
    'us-east-1':
      ImageId: 'ami-b70554c8'
    'us-east-2':
      ImageId: 'ami-8c122be9'
    'us-west-1':
      ImageId: 'ami-e0ba5c83'
    'us-west-2':
      ImageId: 'ami-a9d09ed1'

Conditions:
  CreateProdResources: !Equals [ !Ref Environment, prod ]

Resources:
    TomcatServer:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !FindInMap [RegionToImageId, !Ref 'AWS::Region', ImageId]
      InstanceType: 
        Ref: WebInstanceType
      KeyName: 
        Ref: KeyPair
      NetworkInterfaces:
        - DeviceIndex: 0
          AssociatePublicIpAddress: false
          DeleteOnTermination: true
          SubnetId: !ImportValue "PrivateSubnetId"
          GroupSet:
            - !Ref WebAppSecurityGroup
      Tags:
        - Key: Name
          Value: TomcatServer
      UserData: 
        Fn::Base64:
          !Sub
          - |
            #!/bin/bash
            sudo su
            amazon-linux-extras install -y tomcat8.5
            cd ~
            wget ${Bucket}
            chmod 760 ${File}
            cat ${File} >> /etc/environment
            echo ${Variable} >> /etc/environment
            source /etc/environment
            cat ${File} >> /usr/share/tomcat/conf/tomcat.conf
            source /usr/share/tomcat/conf/tomcat.conf
            service tomcat start
            yum install -y amazon-efs-utils
            echo "${EFSId}:/ /usr/share/tomcat/webapps efs defaults,_netdev 0 0" >> /etc/fstab
            mount -t ${EFSId}.us-east-1.amazonaws.com:/ /usr/share/tomcat/webapps
          - {
            Bucket: !Join [ "", [ "https://s3.amazonaws.com/", !Ref ResourceBucket, "/", !Ref FileName ] ],
            File: !Ref FileName,
            Variable: !Ref EnvironmentVariable
            EFSId: !ImportValue "EFSId"
            }    

  #Load balancer properties
  Elb:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Condition: CreateProdResources
    Properties:
      Type: network
      Name: 'load-balancer'
      Scheme: internet-facing
      Subnets: 
        - !ImportValue "PrivateSubnetId"
      Tags:
        - Key: Name
          Value: 'this-loadbalancer'

  ElbListener:
    Type : AWS::ElasticLoadBalancingV2::Listener
    Condition: CreateProdResources
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: 
            Ref: ElbTargetGroup
      LoadBalancerArn: 
        Ref: Elb
      Port: 80
      Protocol: TCP

  ElbTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: CreateProdResources
    Properties:
      Name: 'targetsForELB'
      Port: 80
      Protocol: TCP
      Targets:
        - Id: 
            Ref: TomcatServer
      Tags:
        - Key: Name
          Value: alb-tg        
      VpcId: !ImportValue "VpcId"


  #Autoscaling configuration
  EC2AutoScalingGroup:
      Type: AWS::AutoScaling::AutoScalingGroup
      Condition: CreateProdResources
      Properties:
        AvailabilityZones: 
          - !ImportValue "SubnetAvailabilityZone" 
          #Nice
        #LaunchConfigurationName: Ref: Ec2Instance
        InstanceId: 
          Ref: TomcatServer
        MinSize: 
          Ref: WebMinSize
        MaxSize: 
          Ref: WebMaxSize
        DesiredCapacity: 
          Ref: WebMinSize
        HealthCheckGracePeriod: 300
        TargetGroupARNs:
          - Ref: ElbTargetGroup
        Tags:
          - Key: Name
            Value: 'auto-scaling-group'
            PropagateAtLaunch: true

  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Condition: CreateProdResources
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: EC2AutoScalingGroup
      Cooldown: '1'
      ScalingAdjustment: '1'

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProdResources
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '60'
      AlarmDescription: Alarm if CPU too high or metric disappears indicating instance
        is down
      Period: '60'
      AlarmActions:
      - Ref: ScaleUpPolicy
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: EC2AutoScalingGroup
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization


  #Security Group
  WebAppSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties: 
      GroupDescription: SSH and HTTP and 8080 and Oracle RDS
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 1521
          ToPort: 1521
          CidrIp: 0.0.0.0/0
      VpcId: !ImportValue "VpcId"

Outputs:
  InstanceID:
    Description: The Instance ID
    Value: !Ref OracleClient
    Export:
      Name: "EC2ID"
