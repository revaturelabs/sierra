AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  ResourceBucket:
    Type: String
    Description: S3Bucket where resources are stored.
  FileName:
    Type: String
    Description: FileName of file containing environment variables
  KeyPair:
    Type: "AWS::EC2::KeyPair::KeyName"
    Description: Enter a valid KeyPair Name
  SSMParameter:
    Type: String
    Description: Name of the SSM Parameter store where environmental variables are stored
  JDKVersion:
    Type: String
    Description: Name of the JDK stored in the ResourceBucket

Mappings:
  RegionToImageId:
    us-east-1:
      ImageId: ami-b70554c8
    us-east-2:
      ImageId: ami-8c122be9
    us-west-1:
      ImageId: ami-e0ba5c83
    us-west-2:
      ImageId: ami-a9d09ed1
    ca-central-1:
      ImageId: ami-0ee86a6a
    ap-south-1:
      ImageId: ami-d783a9b8
    ap-northeast-1: 
      ImageId: ami-e99f4896
    ap-northeast-2:
      ImageId: ami-afd86dc1
    ap-southeast-1:
      ImageId: ami-05868579
    ap-southeast-2:
      ImageId: ami-39f8215b
    eu-central-1:
      ImageId: ami-7c4f7097
    eu-west-1:
      ImageId: ami-466768ac
    eu-west-2:
      ImageId: ami-b8b45ddf
    eu-west-3:
      ImageId: ami-2cf54551
    sa-east-1:
      ImageId: ami-6dca9001

Resources:
  SSMRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      Policies: 
        - 
          PolicyName: "ssm"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: "ssm:*"
                Resource: "*"
        - 
          PolicyName: "s3"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: "s3:*"
                Resource: "*"
  SSMInstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: "/"
      Roles: 
        - 
          Ref: "SSMRole"
  JenkinsClient:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref SSMInstanceProfile
      ImageId: !FindInMap [RegionToImageId, !Ref 'AWS::Region', ImageId]
      InstanceType: t2.micro
      KeyName: 
        Ref: KeyPair
      NetworkInterfaces:
        - DeviceIndex: 0
          AssociatePublicIpAddress: true
          DeleteOnTermination: true
          SubnetId: !ImportValue "PublicSubnetId"
          GroupSet:
            - !ImportValue WebAppSecurityGroupId
      UserData:
        Fn::Base64:
          !Sub
          - |
            #!/bin/bash
            sudo su
            #!/bin/bash
            yum -y update
            yum -y install git
            wget ${JDK}
            rpm -ivh ${Vers}
            yum -y install maven
            amazon-linux-extras install -y tomcat8.5
            service tomcat start
            wget http://mirrors.jenkins.io/war-stable/latest/jenkins.war
            mv jenkins.war /usr/share/tomcat/webapps
            sleep 60
            cd /usr/share/tomcat/.jenkins/
            mkdir init.groovy.d
            chown tomcat:tomcat /usr/share/tomcat/.jenkins/init.groovy.d
            cd init.groovy.d
            wget https://s3.amazonaws.com/siera-project/unlock.groovy
            wget https://s3.amazonaws.com/siera-project/mavin-path.groovy
            wget https://s3.amazonaws.com/siera-project/jdk.groovy
            chown tomcat:tomcat /usr/share/tomcat/.jenkins/init.groovy.d/*
            service tomcat restart
            sleep 60
            cd ~
            wget ${Auto}
            wget http://localhost:8080/jenkins/jnlpJars/jenkins-cli.jar
            unzip -xvf jenkins-cli.jar
            java -jar jenkins-cli.jar -s http://localhost:8080/jenkins/ -auth admin:admin install-plugin git
            java -jar jenkins-cli.jar -s http://localhost:8080/jenkins/ -auth admin:admin install-plugin github
            java -jar jenkins-cli.jar -s http://localhost:8080/jenkins/ -auth admin:admin install-plugin pipeline
            java -jar jenkins-cli.jar -s http://localhost:8080/jenkins/ -auth admin:admin install-plugin CopyArtifact
            java -jar jenkins-cli.jar -s http://localhost:8080/jenkins/ -auth admin:admin safe-restart
            sleep 60
            cat Project2Auto.xml | java -jar jenkins-cli.jar -s http://localhost:8080/jenkins/ -auth admin:admin create-job AutoProd2
            java -jar jenkins-cli.jar -s http://localhost:8080/jenkins/ -auth admin:admin build AutoProd2
            java -jar jenkins-cli.jar -s http://localhost:8080/jenkins/ -auth admin:admin build AutoProd2
            sleep 65
            cd ~
            wget ${Bucket}
            chmod 760 ${File}
            cat ${File} >> /etc/environment
            echo " " >> /etc/environment
            aws ssm get-parameter --region ${Region} --name "${SSM}" | grep -oh "[a-zA-Z0-9_ ]*=[a-zA-Z0-9'_:@.-]*" >> /etc/environment
            source /etc/environment
            cat ${File} >> /usr/share/tomcat/conf/tomcat.conf
            echo " " >> /usr/share/tomcat/conf/tomcat.conf
            aws ssm get-parameter --region ${Region} --name "${SSM}" | grep -oh "[a-zA-Z0-9_ ]*=[a-zA-Z0-9'_:@.-]*" >> /usr/share/tomcat/conf/tomcat.conf
            source /usr/share/tomcat/conf/tomcat.
            service tomcat restart
            yum install -y amazon-efs-utils
            mkdir shared
            echo "${EFSId}:/ /root/shared efs defaults,_netdev 0 0" >> /etc/fstab
            mount -t efs ${EFSId}:/ shared
            sleep 60
            echo "* * * * * cp -a /usr/share/tomcat/webapps/* shared/ " >> testCron
            crontab testCron
          - {
            Bucket: !Join [ "", [ "https://s3.amazonaws.com/", !Ref ResourceBucket, "/", !Ref FileName ] ],
            File: !Ref FileName,
            EFSId: !ImportValue "EFSId",
            Region: !Ref 'AWS::Region',
            SSM: !Ref SSMParameter,
            Vers: !Ref JDKVersion,
            JDK: !Join [ "", [ "https://s3.amazonaws.com/", !Ref ResourceBucket, "/", !Ref JDKVersion] ],
            Auto: !Join [ "", [ "https://s3.amazonaws.com/", !Ref ResourceBucket, "/Project2Auto.xml"] ]
            }

Outputs:
  InstanceID:
    Description: The Instance ID
    Value: !Ref JenkinsClient
    Export:
      Name: "JenkinsId"
  WebhookURL:
    Description: The url needed in github to connect the webhook to jenkins
    Value: !Join ["", ["http://",  !GetAtt JenkinsClient.PublicIp, ":8080/jenkins/github-webhook/"]]
